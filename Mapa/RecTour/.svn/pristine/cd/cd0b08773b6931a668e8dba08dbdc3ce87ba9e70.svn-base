package mobi.rectour.recRoteirosTurismoLazer.gui.shopping;

import mobi.rectour.R;
import mobi.rectour.atualizacoesremotas.AtualizarDadosApp;
import mobi.rectour.atualizacoesremotas.AtualizarDadosApp.IatualizarShoppings;
import mobi.rectour.geral.RecTourDatabase;
import mobi.rectour.mapa.funcoes.FuncoesMenu;
import mobi.rectour.mapa.funcoes.FuncoesMenu.IFuncoesMenu;
import mobi.rectour.mapa.funcoes.v2.funcMyLocation.BuscarLocalizacaoAtualV2;
import mobi.rectour.mapa.funcoes.v2.funcMyLocation.BuscarLocalizacaoAtualV2.ICallBackMinhaLocalizacao;
import mobi.rectour.mapa.funcoes.v2.plotarpontos.PlotarPontosV2;
import mobi.rectour.mapa.funcoes.v2.plotarpontos.PlotarPontosV2.IConstruirPontos;
import mobi.rectour.util.SupportMapFragmentRecTour;
import mobi.rectour.util.SupportMapFragmentRecTour.OnGoogleMapFragmentListener;
import android.app.Activity;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.ViewFlipper;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.CancelableCallback;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

public class ShoppingMapFr extends Fragment implements OnClickListener,
		OnItemClickListener, RadioGroup.OnCheckedChangeListener,
		IatualizarShoppings, ICallBackMinhaLocalizacao,
		OnGoogleMapFragmentListener {

	public static String PKG_Mapa_Shopping = "mobi.rectour.recRoteirosTurismoLazer.gui.shopping.ShoppingMapFr";

	// Mapa
	private GoogleMap mMap;
	private FragmentTransaction tx;
	private SupportMapFragmentRecTour sMf;

	private LayoutInflater layoutInf;

	// Lista Vagas
	private ShoppingListaADPT cAdptListaVagas;
	private ListView lvRestaurantes;

	// Fliper
	private ViewFlipper mFlipper;
	private static final int STATE_MAP = 0;
	private static final int STATE_LIST = 1;
	private int mState;

	// Funções do menu
	FuncoesMenu fmPlotarPontos;
	FuncoesMenu fmTracarRotas;

	RadioButton rb;

	// Progress Bar Carregamento
	private ProgressBar carregando;

	// Marker minha localizacao
	private Marker myLocation;

	public ShoppingMapFr() {
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);

		tx = getActivity().getSupportFragmentManager().beginTransaction();

		sMf = SupportMapFragmentRecTour.newInstance();
		sMf.setmCallback(this);

		tx.replace(R.id.fl_map_spp, sMf, "Mapa_");

		tx.commit();

		// Set callback atualização
		AtualizarDadosApp.iAtualizarShoppings = this;
	}

	IConstruirPontos pontosShopping = new IConstruirPontos() {

		@Override
		public MarkerOptions getMarkeOptions(LatLng local, Cursor cursor) {

			String _id = cursor.getString(cursor.getColumnIndex("_id"));

			return new MarkerOptions()
					.position(local)
					.snippet(_id)
					.icon(BitmapDescriptorFactory
							.fromResource(R.drawable.marker_shop));
		}
	};

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View view = inflater.inflate(R.layout.shopping_mapa, container, false);
		
		// Set views
		mFlipper = (ViewFlipper) view.findViewById(R.id.vf);
		((RadioGroup) view.findViewById(R.id.rgMapaLista))
				.setOnCheckedChangeListener(this);
		((TextView) view.findViewById(R.id.tvTitulo)).setText("Shoppings");

		// Set Inflater
		setLayoutInf(inflater);

		// Set progressBar
		carregando = (ProgressBar) view.findViewById(R.id.pbCarregando);
		rb = (RadioButton) view.findViewById(R.id.rbMapa);

		// Set callback atualização
		AtualizarDadosApp.iAtualizarShoppings = this;

		// lvVagas Set lista vagas
		lvRestaurantes = (ListView) view.findViewById(R.id.lvRestaurante);

		return view;
	}

	CancelableCallback callback = new CancelableCallback() {

		@Override
		public void onFinish() {
			if (!AtualizarDadosApp.atualizandoShopping) {

				Cursor cShoppings = RecTourDatabase
						.recuperarShoppingsDistancia(BuscarLocalizacaoAtualV2
								.getLocalizacao());
				IFuncoesMenu iFuncoesMenuPlotarPontos = new PlotarPontosV2(
						cShoppings, getActivity());
				fmPlotarPontos = new FuncoesMenu(iFuncoesMenuPlotarPontos);
				((PlotarPontosV2) fmPlotarPontos.getFuncoesMenu())
						.setIConstruirPontos(pontosShopping);
				fmPlotarPontos.executarFuncao(mMap);

				cAdptListaVagas = new ShoppingListaADPT(getActivity(),
						cShoppings);
				lvRestaurantes.setAdapter(cAdptListaVagas);
				lvRestaurantes.setOnItemClickListener(ShoppingMapFr.this);

				// Set callback update localizacao
				BuscarLocalizacaoAtualV2.icallMinhaLocalizacao = ShoppingMapFr.this;
			}
		}

		@Override
		public void onCancel() {
		}
	};

	private void setUpMap() {
		// Hide the zoom controls as the button panel will cover it.
		mMap.getUiSettings().setZoomControlsEnabled(false);

		LatLng setLatLog = BuscarLocalizacaoAtualV2.getLocalizacao();

		CameraPosition minhaLocalizacao = new CameraPosition.Builder()
				.target(setLatLog).zoom(16.0f).build();
		MarkerOptions mo = new MarkerOptions()
				.position(setLatLog)
				.snippet("")
				.visible(true)
				.icon(BitmapDescriptorFactory
						.fromResource(R.drawable.icon_my_location));

		myLocation = mMap.addMarker(mo);

		mMap.animateCamera(
				CameraUpdateFactory.newCameraPosition(minhaLocalizacao), 10,
				callback);
		mMap.setInfoWindowAdapter(new ShoppingMaker(getLayoutInf()));

		if (!AtualizarDadosApp.atualizandoShopping) {// Se estiver atualizando
														// as rotas ele n entra
			carregando.setVisibility(View.INVISIBLE);
		}
	}

	@Override
	public void onClick(View v) {
	}

	public LayoutInflater getLayoutInf() {
		return layoutInf;
	}

	public void setLayoutInf(LayoutInflater layoutInf) {
		this.layoutInf = layoutInf;
	}

	@Override
	public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
		rb.setChecked(true);
		mFlipper.setDisplayedChild(STATE_MAP);
		mState = STATE_MAP;

		CameraPosition posicaoCameraClicada = new CameraPosition.Builder()
				.target((LatLng) arg1.getTag()).zoom(19.0f).build();

		mMap.animateCamera(
				CameraUpdateFactory.newCameraPosition(posicaoCameraClicada),
				1000, null);
	}

	@Override
	public void onCheckedChanged(RadioGroup group, int checkedId) {
		switch (checkedId) {
		case R.id.rbMapa:

			if (mState == STATE_MAP) {
				return;
			}

			mFlipper.setDisplayedChild(STATE_MAP);
			mState = STATE_MAP;

			break;
		case R.id.rbLista:
			if (mState == STATE_LIST) {
				return;
			}

			mFlipper.setDisplayedChild(STATE_LIST);
			mState = STATE_LIST;

			break;
		default:
			break;
		}
	}

	public void iniciarProcesso() {
		carregando.setVisibility(View.VISIBLE);
	}

	public void pararProgress(boolean erro) {

		fmPlotarPontos.cancelarFuncao(1);

		// Set novo cursor para plotar as cameras
		fmPlotarPontos.executarFuncao(mMap);
		carregando.setVisibility(View.INVISIBLE);
	}

	@Override
	public void onPause() {
		super.onPause();
	}

	@Override
	public void plotarShoppings() {
	}

	@Override
	public void upDateLocalizacao(LatLng localizacaoAtual) {
		// TODO Auto-generated method stub
		myLocation.setPosition(localizacaoAtual);
	}

	@Override
	public void onMapReady(GoogleMap map) {
		mMap = map;
		setUpMap();
	}
}
